#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "arm_math.h"
#include "arm_const_structs.h"
#include "audio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "xgpiops.h"
#include <stdint.h>


#define SAMPLE_RATE 8000
#define FFT_SIZE 1024

#define TIMER_DEVICE_ID		XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR		XPAR_SCUTIMER_INTR
#define TIMER_LOAD_VALUE	0xFFFF

uint32_t ifftFlag = 0;
uint32_t doBitReverse = 1;
arm_cfft_instance_f32 varInstCfftF32;

volatile int Timer_Intr_rcvd;

uint8_t Buffer_Flag = 0;
float32_t Buffer1[FFT_SIZE*2],Buffer2[FFT_SIZE*2];

float32_t * FFT_Buffer_Ptr;
float32_t FFT_Output[FFT_SIZE];


static void Timer_ISR(void * CallBackRef) { /* ***** I2S Interruption Handler **** */
	static int  counter;
	switch (Buffer_Flag) {
		case 0:
			Buffer1[counter] = Xil_In32(I2S_DATA_RX_L_REG);
			Buffer1[counter+1] = 0;
			break;
		case 1:
			Buffer2[counter] = Xil_In32(I2S_DATA_RX_L_REG);
			Buffer2[counter+1] = 0;
			break;
		default:
			break;
	}

	counter = +2;
	if(counter >= FFT_SIZE){
		switch (Buffer_Flag) {
			case 0:
				FFT_Buffer_Ptr = Buffer1;
				Buffer_Flag = 1;
				break;
			case 1:
				FFT_Buffer_Ptr = Buffer2;
				Buffer_Flag = 0;
				break;
			default:
				break;
		}
		//xil_printf("changing buffer\n\r");
		counter = 0;

	}

}

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId)
{
	int Status;
	XScuGic_Config *IntcConfig;
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	// Step 1: Interrupt Setup
	Xil_ExceptionInit();
	// Step 2: Interrupt Setup
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler,IntcInstancePtr);
	// Step 3: Interrupt Setup
	Status = XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
	// Step 4: Interrupt Setup
	XScuGic_Enable(IntcInstancePtr, TimerIntrId);
	// Step 5:
	XScuTimer_EnableInterrupt(TimerInstancePtr);
	// Step 6: Interrupt Setup
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}


int main()
{
	arm_status status;

	init_platform();

    IicConfig(XPAR_XIICPS_0_DEVICE_ID);

    AudioPllConfig();
    AudioConfigureJacks();
    LineinLineoutConfig();

    XScuTimer Scu_Timer;
    XScuTimer_Config *Scu_ConfigPtr;
    XScuGic IntcInstance;

    Scu_ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
    XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
    Timer_Intr_Setup(&IntcInstance, &Scu_Timer, XPS_SCU_TMR_INT_ID);
    XScuTimer_LoadTimer(&Scu_Timer,(XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2)/SAMPLE_RATE);
    XScuTimer_EnableAutoReload(&Scu_Timer);

    status = ARM_MATH_SUCCESS;
	status = arm_cfft_init_1024_f32(&varInstCfftF32);

	XScuTimer_Start(&Scu_Timer);

	uint32_t refIndex = 213, testIndex = 0;
	float32_t maxValue;
	while(1){

		arm_cfft_f32(&varInstCfftF32, FFT_Buffer_Ptr, ifftFlag, doBitReverse);
		arm_cmplx_mag_f32(FFT_Buffer_Ptr, FFT_Output, FFT_SIZE);
		arm_max_f32(FFT_Output, FFT_SIZE, &maxValue, &testIndex); 	// max waarden van u fft vinden

		//float frequency = (SAMPLE_RATE/FFT_SIZE)* testIndex; 	// brekenen van de frequency

		if(testIndex != refIndex && testIndex != -1){
			xil_printf("Index %d with a frequency\n\r",testIndex);
			refIndex = testIndex;
		}

	}
    cleanup_platform();
    return 0;
}
